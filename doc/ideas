General Ideas
 

Simple Inst Pass
Given a moduledecl 'from' and 'to' with the same interface,
Replace all instances of 'from' to 'to'. This is wonderful for mapping


Pattern Matching Pass
Given 
  module definition (called pattern) which contains instances and connections representing the 'pattern',
  A replacement module called replacement with the same high level interface as pattern,
  and inst name from pattern, to start doing the graph pattern matching

Do the following
  Search each instance in each module to check if it matches the instance from the pattern module.
  If it matches, then recusively check if the rest of pattern matches.

  If the entire thing matches, then do the complicated replacement of replacing that pattern with the other pattern
  (also optionally inline it)


Random idea, implement a generator which takes a module, and an instance, and inlines that instance. 


Ideas for Simple generator language

Basically keep using the same Args.
But add Arguemnt manipulation nodes like 
  ASelect(Args,"strname")
  ABinOp(op,Arg,Arg), there is a question what some of these operations would mean for certain types. Or maybe you cannot manipulate the types in question.
  AUnaryOp(op,Arg)
  ATernary(op,ArgBool,Arg,Arg)
  There could also maybe be a type to get the args from a passed in Module
  AGroup(list("label",Arg))
  I think these can just be the same type as Arg, which means I can
  pass through the values dynamically into genArgs and configArgs of other Generators

  I think that a key insight would be to have an input argument to generators be a ArgBool which tells whether it exists or not.

  This means that on introspection, I can dynamically tell whether The instance exists or not. Also for edges

Maybe there should also be an AOpaque(Args,Args(*fun)(Args args, Void* userdata))

If this is the case, then is there really a difference between a Module and a Generator?

Restructure for coreir to be more similar to LLVM

Named
  string name

Symbol : Value
  Namespace* ns

Instantiable : Symbol
  Configparams params

Module : Instantiable
  
Generator : Instantiable

Wireable : Value

Instance : Wireable
  configArgs

GenInstance : Instance

NamedType : Symboal : Type

GenNamedType : NamedType

LLVM Compiler passes
Module (Set of functions)
  

List of passes I want to do
Compute Verilog: Modules -> Verilog
Requires?
Looping over every Module in the minimized dag

VerilogPass : Module Pass
  map<string,string> Mod2Verilog
  bool runonModule(Module m) {
    if (namespace==stdlib) {

    }
    else if

  }
  string instance2verilog

Run Generators Pass
RunAllGenerators : Module Pass
  

Inline Pass


Add Clock enable pass
ClockEn : ComputeDAG
  runOnModule(Module m) {
    foreach instance {
      if instance has clk
        if has clk en
          add And gate
          Wire output of And to instance.clken
        if no clk en
          instance -> instance with clken
      Wire self.clken -> inst.clken
    }
  }

OR

ClockEN : ComputeDag
  string clken
  runOnModule(Module m) {
    foreach instance with clock
      replace instRef with clkEnGen(instRef)
      Wire m.clken to inst.clken
    }
  }
}

clkEnGen(ModuleDef def, Module mref,Type tref) {
  

}



Add4 -> G(Add2)

Types of passes:

Module Pass
Runs over the modules in arbitrary order
bool runPass(Module m)

computeDAG
Run over Modules in DAG sorted order, bottom up

Instance Pass
Run over all instances in all DAGs in any order.
Is this useful?





For the compilers Have a set of graph editing operations
First is basically replace moduleDef with new moduleDef

//Fundemental
AddNode
DeleteNode(Deletes dangling wires)
AddWire
DeleteWire
Change NodeType (also provide mappings from old wirepaths to new wirepaths)
  //This should default to the same wirepaths if matching.
Change NodeModuleRef
Run Generator
Change genargs
Change configargs

//Helpers
splitedge(edge), Adds a node on an edge between the nodes


Maybe do Typechecking based on moduleDef, and always call when you add the definition to the module

Maybe do flatten on instances within a moduleDef. 

Have ArgNull type
Maybe have default args somehow? That would be nice
Have the Args be references rather than pointers. Can construct normally on stack without helper functions

Change Error handling to do something like LLVM where they return an Error type that you can derefence to get the return value. 

